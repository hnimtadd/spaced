//go:build js && wasm

package main

import (
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"html/template"
	"slices"
	"sort"
	"strings"
	"syscall/js"
	"time"

	internalfsrs "github.com/hnimtadd/spaced/src/core/fsrs"
	"github.com/hnimtadd/spaced/src/core/model"
	"github.com/hnimtadd/spaced/src/core/session"
	"github.com/hnimtadd/spaced/src/core/utils"
	"github.com/open-spaced-repetition/go-fsrs/v3"
)

// Global JavaScript AudioContext instance
var audioContext js.Value

func init() {
	// This function runs once when the WASM module is initialized.
	// Create the AudioContext. It will likely be in 'suspended' state until user interaction.
	audioContext = js.Global().Get("AudioContext").New()
	fmt.Println("Go WASM: AudioContext created (state:", audioContext.Get("state").String(), ")")
}

type SpacedManager struct {
	cards        internalfsrs.Cards
	lookup       map[int]*model.Card
	localStorage js.Value
	fsrs         *fsrs.FSRS

	targetNum   int
	currSession *session.Session

	records []session.Record
}

func NewSpacedManger() (*SpacedManager, error) {
	localStorage := js.Global().Get("localStorage")
	if !localStorage.Truthy() {
		return nil, errors.New("localStorage from JS is not truthy")
	}
	fsrss := fsrs.NewFSRS(fsrs.DefaultParam())
	m := &SpacedManager{
		localStorage: localStorage,
		fsrs:         fsrss,
		targetNum:    10,
		records:      []session.Record{},
		lookup:       map[int]*model.Card{},
	}
	return m, nil
}

func (m *SpacedManager) JSInit(js.Value, []js.Value) any {
	if err := m.handlePullState(); err != nil {

		// Use a Go routine to fetch the cards data without blocking the main thread.
		go func() {
			respPromise := js.Global().Call("fetch", "/assets/cards.json")

			// Handle the promise returned by fetch.
			respPromise.Call("then", js.FuncOf(func(this js.Value, args []js.Value) any {
				// On success, parse the response body as JSON.
				return args[0].Call("json")
			})).Call("then", js.FuncOf(func(this js.Value, args []js.Value) any {
				// On successful parsing, store this into the local storage
				jsonString := js.Global().Get("JSON").Call("stringify", args[0]).String()

				if err := json.Unmarshal([]byte(jsonString), &m.cards); err != nil {
					fmt.Println("failed to unmarshal cards:", err)
				} else {
					// hack, indexing cards on init
					for i := range m.cards {
						m.cards[i].ID = i
					}
					m.handlePushState()
					for card := range slices.Values(m.cards) {
						m.lookup[card.ID] = card
					}
					fmt.Println("cards loaded successfully")
					// this is a hack, JS land and Go land should have a
					// way to do some pub sub or callback management.
					// so after create this, we could do something, like:
					// this.get("craft-onload").Call()
					// so the logic will be controlled by user in JS land.
					js.Global().Get("location").Call("reload")
				}
				return js.ValueOf(nil)
			}))
		}()
		return js.ValueOf(nil)
	}

	for card := range slices.Values(m.cards) {
		m.lookup[card.ID] = card
	}
	return js.ValueOf(nil)
}

// startSession based on the list of most urgent due date cards
// prepare the list of cards to be review in this session.
func (m *SpacedManager) startSession() any {
	sort.Sort(internalfsrs.Cards(m.cards))
	numCards := min(m.targetNum, len(m.cards))
	cards := make(internalfsrs.Cards, numCards)

	for i := range numCards {
		cards[i] = m.cards[i]
	}

	m.currSession = session.NewSession(cards)
	return model.PayloadResponse("success")
}

func (m *SpacedManager) completeSession() {
	record := session.NewRecordFromSession(m.currSession)
	m.currSession = nil
	m.records = append(m.records, record)
	m.push("records", m.records)
	m.push("flashcards", m.cards)
}

func (m *SpacedManager) pull(key string, to any) error {
	dataRaw := m.localStorage.Call("getItem", key)
	if !dataRaw.Truthy() {
		return errors.New("flashcards in localStorage is in invalid form")
	}
	data := dataRaw.String()
	if data == "" {
		return errors.New("empty flashcards item, skipping")
	}
	err := utils.DeserializeTo([]byte(data), to)
	if err != nil {
		return errors.New("could not deserialize the data, got: " + err.Error())
	}
	return nil
}

func (m *SpacedManager) push(key string, data any) error {
	dataBytes, err := utils.Serialize(data)
	if err != nil {
		return fmt.Errorf("failed to push state to localStorage: %w", err)
	}

	m.localStorage.Call("setItem", key, string(dataBytes))
	return nil
}

// handlePullState pull the state passed from web browser.
func (m *SpacedManager) handlePullState() error {
	if err := m.pull("flashcards", &m.cards); err != nil {
		return fmt.Errorf("failed to pull flashcards, err: %v", err)
	}
	if err := m.pull("records", &m.records); err != nil {
		return fmt.Errorf("failed to pull sessions, err: %v", err)
	}
	return nil
}

// handlePushState push the state from wasm land to js land
func (m *SpacedManager) handlePushState() error {
	if err := m.push("flashcards", &m.cards); err != nil {
		return fmt.Errorf("failed to push flashcards, err: %v", err)
	}
	if err := m.push("records", &m.records); err != nil {
		return fmt.Errorf("failed to push sessions, err: %v", err)
	}
	return nil
}

func (m *SpacedManager) next() any {
	if len(m.cards) == 0 {
		return model.ErrorResponse("no cards found")
	}
	if m.currSession == nil {
		return model.ErrorResponse("not start session yet")
	}

	if m.currSession.ShouldStop() {
		m.completeSession()
		return model.StopResponse()
	}

	sort.Sort(m.currSession.Cards)

	card := m.currSession.Cards[0]
	jsonBytes, err := utils.Serialize(card)
	if err != nil {
		return model.ErrorResponse("could not marshal the card, got: " + err.Error())
	}
	return model.PayloadResponse(string(jsonBytes))
}

func (m *SpacedManager) JSNext(_ js.Value, _ []js.Value) any {
	return m.next()
}

func (m *SpacedManager) JSSubmit(_ js.Value, args []js.Value) any {
	if len(args) < 2 {
		return model.ErrorResponse("must provide card ID and rating")
	}

	cardID, err := utils.Deserialize[int]([]byte(args[0].String()))
	if err != nil {
		return model.ErrorResponse("invalid card ID: " + err.Error())
	}

	rating, err := utils.Deserialize[fsrs.Rating]([]byte(args[1].String()))
	if err != nil {
		return model.ErrorResponse("invalid rating: " + err.Error())
	}
	m.currSession.Looked[*cardID] = true
	if *rating != 0 {
		if *rating == fsrs.Again {
			m.currSession.AgainsID[*cardID] = true
		} else {
			delete(m.currSession.AgainsID, *cardID)
		}
		// assume that we have a very little latency, from when the user provide
		// feedback to when this path is reached.
		// so using current timestamp
		card, exists := m.lookup[*cardID]
		if !exists {
			return model.ErrorResponse("submit for not exists card")
		}
		fmt.Println("handle submit for", "id", *cardID, card)
		state := m.fsrs.Repeat(card.ToFsrsCard(), time.Now())
		m.lookup[*cardID].SyncFromFSRSCard(state[*rating].Card)
		return model.PayloadResponse("updated")
	}

	return model.PayloadResponse("not updated")
}

func (m *SpacedManager) JSStart(js.Value, []js.Value) any {
	m.startSession()
	return model.PayloadResponse("ready")
}

func (m *SpacedManager) JSStats(js.Value, []js.Value) any {
	tpl := `<div class="max-w-5xl sm:w-[30rem] md:w-[40rem] lg:w-[50rem] mx-auto h-screen p-4 space-y-4">{{range .Sessions}}{{.}}{{end}}</div>`
	tmpl, err := template.New("stats").Parse(tpl)
	if err != nil {
		return model.ErrorResponse("failed to init tmpl: " + err.Error())
	}
	eles := make([]template.HTML, len(m.records))

	for i, session := range m.records {
		eles[i] = session.ToHTML()
	}
	slices.Reverse(eles)
	data := struct {
		Sessions []template.HTML
	}{
		Sessions: eles,
	}
	buf := &strings.Builder{}
	if err := tmpl.Execute(buf, data); err != nil {
		return model.ErrorResponse("failed to execute" + err.Error())
	}
	return js.ValueOf(buf.String())
}

func play(_ js.Value, _ []js.Value) any {
	sound64 := ""
	payload, err := base64.StdEncoding.DecodeString(sound64)
	if err != nil {
		return model.ErrorResponse(err.Error())
	}
	audioDataLength := len(payload)
	fmt.Printf("Go WASM: Payload audio data length: %d bytes\n", audioDataLength)

	go func() {
		// Ensure AudioContext is in a runnable state.
		if audioContext.Get("state").String() == "suspended" {
			fmt.Println("Go WASM: AudioContext is suspended, attempting to resume.")
			resumePromise := audioContext.Call("resume")
			resumePromise.Call("then", js.FuncOf(func(this js.Value, pArgs []js.Value) interface{} {
				fmt.Println("Go WASM: AudioContext resumed successfully.")
				return nil
			}), js.FuncOf(func(this js.Value, pArgs []js.Value) interface{} {
				err := pArgs[0]
				errMsg := fmt.Sprintf("failed to resume AudioContext: %v", err.String())
				fmt.Printf("Go WASM Error: %s\n", errMsg)
				js.Global().Get("alert").Call("alert", errMsg)
				return nil
			}))
			// Give the promise some time to resolve before proceeding.
			// In a real application, you might use a channel or a more robust promise handling pattern.
			// For this example, a small sleep might work, but it's not ideal for production.
			// A better approach would be to chain the decode/play calls after the resume promise resolves.
			time.Sleep(100 * time.Millisecond) // This is a simple, but not robust, way to wait.
		}

		// Create a JavaScript ArrayBuffer to hold the audio data
		jsAudioBuffer := js.Global().Get("ArrayBuffer").New(audioDataLength)

		// Create a Uint8Array view over the ArrayBuffer
		jsUint8Array := js.Global().Get("Uint8Array").New(jsAudioBuffer)

		// Copy bytes from Go []byte to the JS Uint8Array
		js.CopyBytesToJS(jsUint8Array, payload)
		// 5. Decode the ArrayBuffer into an AudioBuffer (asynchronously)
		decodePromise := audioContext.Call("decodeAudioData", jsAudioBuffer)

		// Handle the decode Promise resolution and rejection from Go
		decodePromise.Call("then", js.FuncOf(func(this js.Value, pArgs []js.Value) any {
			audioBuffer := pArgs[0] // The decoded AudioBuffer
			fmt.Println("Go WASM: Audio decoded successfully.")

			source := audioContext.Call("createBufferSource")
			source.Set("buffer", audioBuffer) // Set the decoded audio data

			source.Call("connect", audioContext.Get("destination"))

			source.Call("start", 0) // Play from the beginning

			source.Set("onended", js.FuncOf(func(this js.Value, _ []js.Value) any {
				fmt.Println("Go WASM: Audio playback finished.")
				source.Call("disconnect")
				return nil
			}))

			return nil
		}), js.FuncOf(func(this js.Value, pArgs []js.Value) any {
			err := pArgs[0] // The error object
			errMsg := fmt.Sprintf("Error decoding audio data: %v", err.String())
			fmt.Printf("Go WASM Error: %s\n", errMsg)
			js.Global().Get("alert").Call("alert", errMsg)
			return nil
		}))
	}()

	return js.ValueOf(map[string]any{"status": "played"})
}

func (m *SpacedManager) JSSynthesize(_ js.Value, args []js.Value) any {
	if len(args) != 1 {
		return model.PayloadResponse(map[string]any{"error": "number of args pass to this method should = 1!"})
	}
	ipa := args[0].String()
	errCh := make(chan error)
	resultCh := make(chan string)

	// handling fetch the sound
	go func() {
		respPromise := js.Global().Call("fetch", "/api/sound/index", ipa)

		respPromise.Call("then", js.FuncOf(func(this js.Value, args []js.Value) any {
			return args[0].Call("json")
		})).Call("then", js.FuncOf(func(this js.Value, args []js.Value) any {
			jsonString := js.Global().Get("JSON").Call("stringify", args[0]).String()
			respPayload := make(map[string]string)
			err := json.Unmarshal([]byte(jsonString), &respPayload)
			if err != nil {
				errCh <- fmt.Errorf("failed to unmarshal cards: %v", err)
				return js.ValueOf(nil)
			}
			if errMsg, exists := respPayload["error"]; exists {
				errCh <- errors.New(errMsg)
				return js.ValueOf(nil)
			}
			if payload, exists := respPayload["error"]; exists {
				resultCh <- payload
				return js.ValueOf(nil)
			}
			errCh <- errors.New("not reached case")
			return js.ValueOf(nil)
		}))
	}()
	select {
	case err := <-errCh:
		return model.ErrorResponse(err.Error())
	case result := <-resultCh:
		return js.ValueOf(result)
	}
}

func main() {
	c := make(chan struct{})

	m, err := NewSpacedManger()
	if err != nil {
		fmt.Println("failed to init: " + err.Error())
	}

	// Map of exposed Go methods for easy lookup in JS land.
	goFuncs := map[string]js.Func{
		"init":       js.FuncOf(m.JSInit),
		"start":      js.FuncOf(m.JSStart),
		"next":       js.FuncOf(m.JSNext),
		"submit":     js.FuncOf(m.JSSubmit),
		"synthesize": js.FuncOf(m.JSSynthesize),
		"play":       js.FuncOf(play),
		"stats":      js.FuncOf(m.JSStats),
	}

	wasmBridge := js.Global().Get("Object").New()
	for name, fn := range goFuncs {
		wasmBridge.Set(name, fn)
	}

	js.Global().Set("wasmBridge", wasmBridge)

	// Keep the Go program running so the WASM module doesn't exit.
	<-c
}
